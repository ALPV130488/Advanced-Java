0,1-binary-->ASCII,UNICODE

							Computer lang
						
						programming lang			scripting lang
						
	pl:-used to create sofware
	sl:-used to create webpages
	
					programming lang
				
				pop				oop
			(procedure o.pl)	(oriented o.p)
			
								java,c++,
	
	java :- oops 		oopl
			
			
			performance:-inheritance;polymorphism			(reuse )
			security:-abstraction;encapsulation				
			
			
			java:-
			
		garbage collector
		
		platform independency
		
					history:-
					
		green team -------green talk(.gt)----oak-------java(jdk 1.0)
	
			jdk20
			
			
			3 edt:-
			
			jse/j2se:-standlone(ex:-calculator)
			
			jee/j2ee:-enterprise/web application/distributed
			
			jme/j2me:-mobile
			
			
			Example.java-----compiler---->Example.class-----exection ------>o/p
			
			
			Assembley----------->assembler
			
			$ADD ------------>Low level 
			
			
			high level lang:-
			
			compiler 
			
			interpreter
			
		
			source code---------->machine code(.x)-------->o/p
			
			windows:-10- 1010
			mac:- 10- 1111
			
			
			source ----------->interpretation (line by line )----->o/p
			
			
			
			java -------->byte code(.class)
			
			
			variables:-2 types:-		dt varname;//declaration 
			
										varname=value;//instialization
										
								dt varname=value;//var creation
			
			(1)local varia			(2)gloabl var
								
								static 				instance
								
								
	syntax:-		
				static:-	static int varname= value;
				instance:-	dt varname=value;// instance var creation	
								
	
	memory:-
	
			static:-it will gets the memory space only once when the class loads into the jvm.
			
			instance:-it will gets the memory space for every object creation.
			
	calling:-
	
			static props:-class refrence
			instance props:-obj refrence
			
			create creation:-
			
			classname obj name = new classname(); //obj creation
			
			
			
	where to use:-	

			static :-common data
			
			instance:-unique things
			
			
		* for every java class the default package is java.lang	
			
			
			
			
			OPERANDS :-		a+b
			
			int x=5;
			
			x =++x;===>x=x+1
			
			
			
			U-		--,++,
			
			L-		&,|
			
			T-		(1==3)?true:false;
			
			R-		<,>
			
			A-		=
			
			A-		+
			
			B-	
			
		IDE Shortcuts:-	
			
		suggestions:-ctrl+space
		
		comments:-ctrl+/
			
			
			
			
				signature/syntax:-
			
						accesmodifier	retuntype	methodname()
											{
											//implementation
											
											return;
											}
											
					2 types:-(1)static method
							(2) instance method
							
					
					oops:-
					
					Inheritance:-Accquiring parent cls prop's to child cls.
					
			
			extends 									implements
		cls------>cls
														interface---->interface
		interface---->interface
														cls----->interface
							
				calss A{
				
				//100 met's
				}	

					class B extends A{
					
					//20 ================>100+20
					
					}
					

						INTERFACE A 									
							{
											
							P V ADD(int a,int b){
							syso(a+b)
							
							}
							}
			
			
			interface A1{
			
			p v add(int a,int b){
			
			
			syso(a-b)
			}
			
			
			}
			child extends A,B
			
			
			*For every java file Object cls is the parent .
			
			#MI:- is not supported in java @cls level
			#it's supported @ interface level
			
			
			
			2 types method :-based on met's implementation/body.
			
			(1)abstract met		:- if the met is not having any implementation		

				syntax:- a.m  retuntype metname();
				
							a.m abstract retuntype metname(){}
			
			(2)concreate met	:-if the met is having some implementation
			
			
			
			class:-collection of only concrete met's.
			
			abstract cls:- abstract met's+concrete met'scripting
			
			interface :-collection of only abstract met's.
			
			
			
			Abstraction:-
			
			interface:-collection of only abstract met's.
			
			
			Polymorhism:-
			
			(1)MethodOverloading:-same met name but diff in the parameters
			
									(1)No:of parameters
									(2)order of parameters
									(3)type of parameters
			
			
			
			(2)MethodOverriding:-same met name but diff in the met implementation
			
			class A{
			
			marriage()
			{
			//unknown girl
			}
			
			10cr(){
			}
			
			}
			
			class B extends A{
			@Override
			marriage()
			{
			//kajol
			}
			
			10cr(){
			}
			
			}
			
			
			}
			
			Encapsulation:-Warpping up of all the similar data in a single entity/class. 
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
