0,1-binary-->ASCII,UNICODE

							Computer lang
						
						programming lang			scripting lang
						
	pl:-used to create sofware
	sl:-used to create webpages
	
					programming lang
				
				pop				oop
			(procedure o.pl)	(oriented o.p)
			
								java,c++,
	
	java :- oops 		oopl
			
			
			performance:-inheritance;polymorphism			(reuse )
			security:-abstraction;encapsulation				
			
			
			java:-
			
		garbage collector
		
		platform independency
		
					history:-
					
		green team -------green talk(.gt)----oak-------java(jdk 1.0)
	
			jdk20
			
			
			3 edt:-
			
			jse/j2se:-standlone(ex:-calculator)
			
			jee/j2ee:-enterprise/web application/distributed
			
			jme/j2me:-mobile
			
			
			Example.java-----compiler---->Example.class-----exection ------>o/p
			
			
			Assembley----------->assembler
			
			$ADD ------------>Low level 
			
			
			high level lang:-
			
			compiler 
			
			interpreter
			
		
			source code---------->machine code(.x)-------->o/p
			
			windows:-10- 1010
			mac:- 10- 1111
			
			
			source ----------->interpretation (line by line )----->o/p
			
			
			
			java -------->byte code(.class)
			
			
			variables:-2 types:-		dt varname;//declaration 
			
										varname=value;//instialization
										
								dt varname=value;//var creation
			
			(1)local varia			(2)gloabl var
								
								static 				instance
								
								
	syntax:-		
				static:-	static int varname= value;
				instance:-	dt varname=value;// instance var creation	
								
	
	memory:-
	
			static:-it will gets the memory space only once when the class loads into the jvm.
			
			instance:-it will gets the memory space for every object creation.
			
	calling:-
	
			static props:-class refrence
			instance props:-obj refrence
			
			create creation:-
			
			classname obj name = new classname(); //obj creation
			
			
			
	where to use:-	

			static :-common data
			
			instance:-unique things
			
			
		* for every java class the default package is java.lang	
			
			
			
			
			OPERANDS :-		a+b
			
			int x=5;
			
			x =++x;===>x=x+1
			
			
			
			U-		--,++,
			
			L-		&,|
			
			T-		(1==3)?true:false;
			
			R-		<,>
			
			A-		=
			
			A-		+
			
			B-	
			
		IDE Shortcuts:-	
			
		suggestions:-ctrl+space
		
		comments:-ctrl+/
			
			
			
			
				signature/syntax:-
			
						accesmodifier	retuntype	methodname()
											{
											//implementation
											
											return;
											}
											
					2 types:-(1)static method
							(2) instance method
							
					
					oops:-
					
					Inheritance:-Accquiring parent cls prop's to child cls.
					
			
			extends 									implements
		cls------>cls
														interface---->interface
		interface---->interface
														cls----->interface
							
				calss A{
				
				//100 met's
				}	

					class B extends A{
					
					//20 ================>100+20
					
					}
					

						INTERFACE A 									
							{
											
							P V ADD(int a,int b){
							syso(a+b)
							
							}
							}
			
			
			interface A1{
			
			p v add(int a,int b){
			
			
			syso(a-b)
			}
			
			
			}
			child extends A,B
			
			
			*For every java file Object cls is the parent .
			
			#MI:- is not supported in java @cls level
			#it's supported @ interface level
			
			
			
			2 types method :-based on met's implementation/body.
			
			(1)abstract met		:- if the met is not having any implementation		

				syntax:- a.m  retuntype metname();
				
							a.m abstract retuntype metname(){}
			
			(2)concreate met	:-if the met is having some implementation
			
			
			
			class:-collection of only concrete met's.`			(0%)
			
			abstract cls:- abstract met's+concrete met'scripting		(0%-100%)
			
			interface :-collection of only abstract met's.					(100%)
			
			
			
			Abstraction:-
			
			interface:-collection of only abstract met's.
			
			
			
			
			Polymorhism:-
			
			(1)MethodOverloading:-same met name but diff in the parameters
			
									(1)No:of parameters
									(2)order of parameters
									(3)type of parameters
			
			
			
			(2)MethodOverriding:-same met name but diff in the met implementation
			
			class A{
			
			marriage()
			{
			//unknown girl
			}
			
			10cr(){
			}
			
			}
			
			class B extends A{
			@Override
			marriage()
			{
			//kajol
			}
			
			10cr(){
			}
			
			}
			
			
			}
			
			Encapsulation:-Warpping up of all the similar data in a single entity/class. 
			
			
			
			Constructor:-initialize the obj
			
			
			class A-
		
		
				obj
				
					A obj = new A();
			
			
			2 types:-- (1)default constr			a.m classname(){
														}
					(2)Parametrized constr			a.m classname(params...){
														}
			
			
			access modifiers:-to resist
			
						class props:- var,met's,constr
			
			
			(1)public
			(2)private
			(3)protected
			(4)default
			
			
			
			
			Naming Conventions:--
			
			
			packages:--	
			(1)packages names must be in smaller case
			(2)compressed name
			
			classes:-
			(1)starting letter must be in uppercase
			
			methods:-
			(1)Camel case :- toString();
			
			static final:-
			
			(1)Capital words.
			
			
			Wrapper classes:-
			
			
			Interger obj =-
			
			
			
			
			
			
			
			final:- var:- value can't be changed if we declare at once
					met:-we can't override the met if declare final keyword at the met signature
			
			
			super:-To use Parent cls prop's  into the child class
			
			
			this:-to use the current clss prop's
			
			userdefinedexceptions:-we need to make it as a child clss for the Exception class
			
			
			Arrays:-
			
			3 methods:-
			
			(1)int[] arrname =  new int[limit of array];
				int arrname[] =  new int[limit of array];
				int []arrname =  new int[limit of array];
			
			
			(2)int[] arrname= new int[]{1,2,3,4,4,5}
			
			(3)int[] arrname ={12,34,45,56}
			
			limitations:-
			-->length of an array we need mention in prior,it's fixed in size once declared
			-->homogenous 
			-->utility methods
			
			
			Collections framework:-
			
			
			10:-default size
			
			
			lang:-Comparbale:-compareTo()=>
			
			util:-Comparator:-compare(NSO)
			
			
			
			String:-

					String(Immutable)		StringBuffer(Mutable) (Sync) 		StringBuilder(Mutable)(not-synco)
	
			multitasking(multithreading)
			
			we loss some data
			
			save the time 
			
			task:-
			
			time taking process
			
			data security
			
			
			File Handling :- io
			
					1.create file   - File
					
					2.write into file  -FileWriter
										BufferedWriter
										PrintWriter
					
					3.read from file	-FileReader
										BufferedReader
										
		io packges:-	

				write:-(1)FileOutStream
						(2)BufferedOutputStream
						
				read:-(1)FileInputStream
						(2)BufferedInputStream
										
										
										
										
										
										
										
										
										
			Serialization:-To transfer object related data to normal data.
			
			
			deserialization :-to convert normal data to object data.
										
			
										stream
										
							byteStream				charStream			
			
			
			
			
			age calculator
			
			
			util.Date
			
			Date
			
			
			
			data:-Raw info of any real world entities.
			
			database:-To store the data in an organized way for security,future access.....
			
			
														

									
a		apple				45454


b		cat					45849							
			
											
c		orange				48556
			
																			
			
			rdbms:-		rows(records)+columns(fields)
			
			oracle,mysql, db2, postgres ,h2
			
			
											
			crud:-
			
		c	create
		r	retrive
		u	update
		d	delete
			
			
			
							
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			