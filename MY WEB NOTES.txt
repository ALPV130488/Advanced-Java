WEBSERVICES:
============
**INTRODUCTION.
***WEBSERVICES ARCHITECTURE AND COMPONENTS.

JAVA WEBSERVICES API:(GIVEN BY SUN MICRO SYSTEM)
=====================
-->JAX-RPC
-->JAX-M
-->JAX-WS
-->JAX-RS
JAVA WEBSERVICES IMPLEMENTATION API'S(SOAP WEBSERVICES) :
=========================================================
-->AXIS1
-->JAX-RPC-SI
-->JAX-WS-RI
-->METRO
-->AXIS2
-->APACHE CXF

WEBSERVICE SECURITY:
--------------------
RESTFUL WEBSERVICE:
===================
-->JERSY
-->RESTEASY
-->RESTLET
-->APACHE CXF
-->APACHE WINK


RESTFUL SECURITY:
---------------------
 app1    app2
java		.net,jboss
tomcat
windows


INTRODUCTION:
==============
**IF WE WANT SHARE THE INFORMATION BETWEEN TWO INTEROPERABLE APPLICATIONS.


WHAT IS THE NEED OF SHARING OF INFORATION BETWEEN TWO APPLCATIONS.

EX:USING SBI ATM CARD IN OTHER BANK ATM MACHINE. 


WHAT ARE TECHNOLOGIES WE HAVE BEFORE WEBSERVICES AND DISADVANTAGES WITH THOSE TECHNOLOGIES:
===========================================================================================

-->SOCKET PROGRAMMING    soap--->XML   restfull-->xml,json,html,txt,......
-->RMI
-->EJB  
-->DCOM
-->RPC
-->CORBA

USING THESE TECHNOLOGIES ALSO WE CAN SHARE THE INFORMATION BETWEEN TWO APPLCATIONS.

SOCKET PROGRAMMING(NET WORKING(CORE JAVA CONCEPT)):
------------------
**USING THIS WE CAN MAKE COMMUNICATION IF BOTH THE APPLCATIONS ARE JAVA APPLCATIONS(DEPENDECY).

--->SP,RMI,EJB THESE THREE TECHNOLOGIES ARE GIVEN BY SUN MICROSOFT SYSTEMS USING THESE WE CAN MAKE COMMUNICATION IF BOTH THE APPLCATIONS ARE JAVA APPLCATIONS.

EJB:
-----
**WE HAVE ENTITY BEANS(LIKE JDBC,HIBERNATE),SESSION BEANS(WE CAN SHARE THE INFORMATION BETWEEN TWO java APPLCATIONS).

DCOM(DISTRIBUTED COMMUNICATIONS):
---------------------------------
**GIVEN BY MICROSOFT(USING THIS WE CAN MAKE COMMUNICATION IF BOTH THE APPLCATIONS ARE .NET APPLCATIONS)

RPC(REMOTE PROCEDURE CALLS):
----
***GIVEN BY OBJECT MANAGEMENT GROUP(USING THIS WE CAN MAKE COMMUNICATION IF BOTH THE APPLCATIONS ARE C/C++ APPLCATIONS).

CORBA:(COMMON OBJECT REQUEST BROKER ARCHITECTURE)
-----
***GIVEN BY OBJECT MANAGEMENT GROUP(THIS IS THE FIRST TECHNOLOGIE TO MAKE COMMUNICATION BETWEEN TWO INTEROPERABLE APPLCATIONS)

**CORBA IS SPECIFICATION(SERVLET IS SPECIFICATION IMPLEMENTATIONS TOMCAT,WEBLOGIC,JBOSS),LOT OF VENDORS HAS GIEVN IMPLEMENTATIONS LIKE SUN,MICROSOFT,C++ .
 
 BECAUSE OF NOT GIVING PROPER IMPLEMENTATIONS THE COMMUNICATION WAS NOT HAPPENED(IN SOME CASES)

 WEBSERVICES IS SPECIFIACTION(SET OF RULES AND GUIDELINES I.E WEBSERVICE ARCHITECTURE).
 
webservice--->soap--->xml,restful--->json,xml,pdf,txt,html....
 WEBSERVICE ARCHITECTURE:
 ========================
 IN THIS ARCHITECTURE MAINLY WE HAVE 6 COMPONENTS THEY ARE
 
 1)WSDL(WEBSERVICE DESCRIPTION LANGUAGE).xml
 2)UDDI(Universal Description, Discovery, and Integration.)(IT IS OPTIONAL TO USE)
 3)SKELETON--->class
 4)STUB OR PROXY GENERATION TOOL
 5)SOAP PROTOCAL
 6)HTTP PROTOCAL
 
 
 ***WEBSERVICES  SUGGESTED THESE 6 COMPONENTS  TO MAKE COMMUNICATION BETWEEN TWO INTEROPERABLE APPLCATIONS.
 
 
 XML(UNIVERSAL LANG):
 ===
 1)SERVICE NAME
 2)METHOD NAME(OPERATION NAMES)
 3)PARAMETER DATA TYPES
 4)RETURN TYPES
 **5)END POINT URL(THE LOCATION WHERE OUR/YOUR CLASS RUNNING).
 
 WSDL(IT DESCRIBE ABOUT SERVICE CLASS DETAILS).
 
WHO WILL PREPARE THIS WSDL(XML) FILE.
 
 *WE HAVE SOME PREDEFINED CLASSES(TOOLS) I.E WSDL GENERATION TOOL(HERE WE NEED TO PROVIDE OUR JAVA (SERVICE)CLASS OR END POINT URL).
 
 WHO WILL SHARE  THIS WSDL(XML) FILE TO CLIENT.
 
 *BY EMAIL WITH ATTACHMENT(ONE TO ONE) OR UDDI() REGISTRY(ONE TO MULTIPLE)
	
	AFTER GENERATING WSDL FILE  WE CAN PLACE(PUBLISHING) THAT FILE IN UDDI REGISTRY BY UNIQUE ADDRESS.
	
**ONCE CLIENT GET THE WSDL FROM SERVICE PROVIDER THEN CLIENT GENERATE RELATED CLASSES(STUB)DEPENDS ON CLIENT TECHNOLOGIE.
	
*NO NEED TO GENERATE MANUALLY,USING STUB(PRE DEFINED CLASS) GENERATE TOOL WE CAN GENERATE AUTOMATICALLY. IT GENERATE STUBS SAME LIKE YOUR SERVICE CLASS ,WHICH CONTAINSE 
SERVICE CLASS DETAILS WITH CLIENT IMPLEMENTATION.

USING THAT STUB WE CAN CALL FUNCTIONALITY BUT FOR EXECUTING THAT SERVICE IMPLEMENTATION WE NEED TO GET THE OUTPUT SO WE NEED TO GENERATE ONE MORE XML FILE(WHICH CONTAINSE PREDEFINED TAGS).

THESE TAGS WE CALL LIKE SOAP TAGS 

**STUB WILL GENERATE THE REQUEST XML FILE(METHOD NAME,PARAMETERS,DATATYPES) USING SOAP TAGS WE CAN SAY SOAP REQUEST.

**HERE HTTP PROTOCAL WHICH MOVES SOAP REQUEST(XML) FROM CLIENT TO SERVICE.
	
**AGAIN SERVICE SIDE NEED TO TAKE THE INFO FROM SOAP REQUEST THAT CLASS NAME IS CALLED SKELETON(PREDEFINED CLASS)IT WILL GET SOAP REQUEST AND CREATE CORRESPONDING OBJECT CALLING THE METHOD AND GETTING RETURN TYPE AND GENERATE THE RESPONSE.XML USING SOAPTAGS

**WE USED CALL SOAP RESPONSE AND SOAP REQUEST.

** WEBSERVICE MEANS SERVICE SHOULD BE WEBAPP BUT CLIENT CAN BE ANYTHING LIKE STANDALONE,WEB,ANDROID APP... ETC

** IF WE HAVE MULTIPLE SERVICE CLASSES,ONE SKELETON WILL MANAGE ALL THE SERVICE CLASSES BUT EACH SERVICE CLASS WE SHOULD HAVE ONE WSDL FILE.
  
** ALWAYS SKELETON SHOULD BE IN WEB.XML FILE.

** IF WE HAVE MULTIPLE SERVICE CLASSES  IF CLIENT SEND THE SOAP REQUEST THEN IT USE ONE MORE WEBSERVICECONFIGURATION.XML(INN THIS WE NEED PROVIDE ALL THE SERVICE CLASS DETAILS WITH UNIQUE NAMES) 
TO THAT SOAP REQUEST CORRESPONDING SERVICE CLASS WILL BE INVOKED.
	
	
JAVA WEBSERVICES API'S(USING THESE APIS WE CAN DEVELOP BOTH CLIENT AND SERVICE)
SUN HAS PROVIDED 4 API'S 

1)JAX-RPC(JAVA API XML FOR REMOTE PROCEDURE CALL)wsdl-->xml 
2)JAX-M(JAVA API FOR XML MESSEGING)
3)JAX-WS(JAVA API FOR XML WEBSERVICES)
4)JAX-RS(JAVA API FOR XML BASED RESTFUL SERVICES)JSON wadl

THESE ALL ARE INTERFACES(SPECIFICATIONS) WITH OUT IMPLEMENTATIONS 

JSON-->{"name":"akash","id":123..}

WHAT ARE THE IMPLEMENTATIONS:
================================
JAX-RPC



MAINLY WE HAVE TWO TYPES WEBSERVICES,synchronous WEBSERVICES AND asynchronous WEBSERVICES

**when ever client makes a request to the service,it takes that request and process that and immediatly it gives response then that type services are synchronous webservices.
 
**when ever client makes a request to the service,it takes that request and it will not give response immediatly then that type of services are asynchronous webservices
 
**TO DEVELOP synchronous WEBSERVICES WE HAVE JAX-RPC,JAX-WS,JAX-RS
 
**TO DEVELOP asynchronous WEBSERVICES WE HAVE JAX-M.(JMS)

  WE USED TO DEVELOP ONLY synchronous WEBSERVICES.
  
  JAX-RPC IS IN JDK 1.4
  JAX-WS IS IN JDK 1.5
  JAX-M IS IN JDK 1.4
  JAX-RS IN JDK 1.6
  
  synchronous WEBSERVICES DEVIDED INTO 2 TYPES
  
  1)SOAP BASED WEBSERVICES(JAX-RPC,JAX-WS)
  2)RESTFUL WEBSERVICES(JAX-RS)
  
  JAX-RPC(JAVA API FOR XML-REMOTE PROCEDURE CALL)
================================================
THIS IS A SPECIFICATION GIVEN BY SUN ALONG WITH JDK1.4

USING THIS WE CAN DEVELOP BOTH SOAP BASED WEB SERVICES OR 
SOAP BASED WEB SERVICE CLIENTS

1. JAX-RPC-SI(SUN IMPLEMENTATION)

THIS IS AN IMPLEMENTATION NAME FOR JAX-RPC WHICH IS GIVEN BY SUN MICROSYSTEM.
 GIVEN ALONG WITH JDK, SEPARATELY WE NEED TO DOWNLOAD THIS API.

THIS API IS NOT
2. AXIS1 - IMPLEMENTATION GIVEN BY APACHE FOUNDATION


SEPARATELY WE NEED TO DOWNLOAD TO CREATE WEBSERVICE 

THESE TWO ARE SERVER INDEPENDENT IMPLEMENTATIONS AND REMAINING ARE DEPENDENT IMPLEMENTATIONS

3. WEBLOGIC IMPLEMENTATION-BEA -ORACLE THESE IMPLEMENATION IS PART OF THE SERVER.

4. WEBSPHERE IMPLEMENTATION - IBM

5. JBOSS IMPLMENETATION - REDHATT

THE ABOVE 5 ARE IMPLEMENTATIONS ARE FOR JAX-RPC


ALL THESE PROVIDE WSDL GENERATION TOOLS  AND THEY SHOULD PROVIDE SKELETON IF WE DEVELOP WEBSERVICE

=================================

JAX-WS(JAVA API FOR XML - WEBSERVICE)
------------------------------------
1. JAX-WS-RI(REFERENCE IMPLEMENTATION)

-NOT FULLY IMPLEMENTATION - GIVEN BY SUN
FROM JDK 1.6 INCLUDED THIS API ALONG WITH SOFTWARE BEFORE JDK 1.6 WE NEED TO SEPARATELY DOWNLOAD

2. METRO - GIVEN BY SUN-FULLY IMPLMENATION-NOT CAME WITH JDK-SEPARATELY NEED TO DOWNLOAD

3. AXIS2-APACHE FOUNDATION

4. APACHE CXF - APACHE FOUNDATION

WHY APACHE FOUNDATION GIVEN TWO IMPLEMENTATIONS FOR JAX-WS

APACHE CXF IS SUPPORTS THE SPRING INTEGRATION AND AXIS2 IS NOT SUPPRTING WITH THE SPRING INTEGRATION

5. WEBLOGIC IMPLEMENTATION - BEA - ORACLE-ALONG WITH THE WEBLOGIC SERVER

6.WEB SPHERE IMPLEMENTATION - IBM - CAME ALONG WITH WEBLOGIC SERVER

7. JBOSS IMPLEMENATION - REDHATT

8. GLASSFISH IMPLEMENTATION -INTERNALLY CONTAINS METRO IMPLEMENTATION - SUN MIRCROSYSTEM 



JAX-RPC:
-------
SERVER-CONFIG.WSDD(CONFIGURATION FILE)

JAX-WS:
--------
SUN-JAXWS.XML(CONFIGURATION FILE)

skeleton name--->wsservlet

JARS:-https://jax-ws.java.net.2.2.10/

JAX-RS(JAVA API FOR XML-REPRESENTATIONAL STATE)
================================================
1.JERSEY IMPLEMENTATION - SUN MICROSYSTEM-SEPARATELY DOWNLOAD

2.RESTEASY - REDHATT(SUPPORTS SPRING INTEGRATION)

3.RESTLET-JEROMY LOAVEL(DEVELOPER)

4.APACHE CXF - APACHE FOUNDATION

5.APACHE WINK - APACHE FOUNDATION-NOT SUPPORTS SPRING INTEGRATION


DEVELOPING THE WEBSERVICE USING JAX-RPC (AXIS1 IMPLEMENTATION)
===============================================================


WEB SERVICE SERVICE CLASS:
=========================

1. TAKE THE DYNAMIC WEB PROJECT

2. UNDER SRC CREATE ONE CLASS

3. ADD THE SERVER AND START THE SERVER SO THAT AXIS1 IMPLMENETATION CLASSSES RELATED JAR FILES ARE GOING TO BE ADDED FOR YOUR PROJECT



JAX-B:
======
jackson
MARSHELLING:
============
THE PROCESS OF CONVERTING JAVA OBJECT INTO XML OBJECT.

UNMARSHELLING:
==============
THE PROCESS OF CONVERTING XML OBJECT INTO JAVA OBJECT.



REST FUL WEBSERVICES:
======================
REPRESENTATIONAL STATE TRANSFER

A WEB IS A COMBINATION OF RESOURCES

THAT MAY BE SERVLET, CONTROLLER, ....

http://localhost:2015/CustomerInfo/getCustomer

BASE URL

getCustomer-resource

DIFFERENCE B/W SOAP & REST WEBSERVICES
=======================================

MESSAGE FORMAT IN SOAP-XML FORMAT

MESSAGE FORMAT IO REST - XML,JSON,TEXT...

INTERFACE DEFINITION IN SOAP - WSDL

INTERFACE DEFINITION IN REST - WADL
(WEB APPLICATION DESCRIPTION LANGUAGE)

TRANSPORT PROTOCOL IN SOAP - HTTP
TRANSPORT PROTOCOL IN REST - HTTP/HTTPS

SOAP - AXIS2,JAXWS
REST IMPLEMENTATIONS

JERSY - SUN
APACHE CXF - APACHE FOUNDATION

RESTEASY -JBOSS

LETS TALK ABOUT JERSY!!!!

GET REQUESTED METHOD - TO GET THE INFORMATION
POST REQEUESTED METHOD - TO INSERT THE INFO
PUT REQUESTED METHOD - TO UPDATE THE INFO
DELETE REQUESTED METHOD - TO DELETE THE INFO


JAXB WITH REST
JSON WITH REST



practicle:
-------------
Axis1 implementation using apache:
--------------------------------- 
webservice run time means implementation by default
  
  
  
  we have two ways to develop webservices 
  1)top down approach:
  --------------------
  **in this first we will develop wsdl file and required xsd's from that we will generate required user defined types and service implementation class.then we will go for service class,based on our requirements we can write .....
  
  2)bottom up approach:
  ------------------
  ** in this first we will develop service class then we will convert that into webservice.
  
  
   we have two ways to develop webservice client

	1)proxy based client:
	---------------------
	
	*if client generates stubs at client side and if client uses that stubs in his application to invokes the webservices....then its PBC
	
	2)DII(dynamic invocation interface) client
  
	*in DII, client never generates the stubs or pr
		
		then how we will invoke the services,here the webservice implementations(axis1,axis2,apachecxf....) will provide some classes we will use that to invoke webservices 
  
  in axis1 implementation AxisServlet is the skeleton class.
  
	server-config.xml
  
	endpoint url
	
	wsdl url
	
	after creating the stubs we need create stub object in our client class in that we need to pass two objects they are  url and service.
	
	
	java.net.URL endPointURL=new java.net.URL("http://localhost:8000/JAX-RPC-AXIS1-SERVICE/services/CalService");
		org.apache.axis.client.Service service=new org.apache.axis.client.Service();
		
		
		
	
	JAX-WS-RI:
	===========
	ALONG WITH JDK 1.6 ITS AVAILABLE  
	
	WE CAN FIND IN JDK==>BIN==>WSGEN(WSDL GENERATIO TOOL),WSIMPORT(STUB GENERATION TOOL).
 
 
 
manually we need to generate the stubs using wsdl url or wsdl file.


we need to open cmd and provide our src folder path in cmd then wsimport -keep -verbose wsdl url(keep and verbose these are optional with our these keywords internally it generates  and compile remove the .java files if we want those files  we need to write)
 
 -verbose will work like a printstacktrace
 
 
 SEI===>Service endpoint interface 
 
 
 
 JAX-WS-METRO IS SAME LIKE RI IMPLEMENTATION EXCEPT SEPARATE JAR FILES MANUALLY GENERATEINNG THE STUBS  USING CMD 
SUN-JAXWS.XML IS SAME AND WEB.XML IS TOO. 
 
 
 
 
 JAX-WS WITH AXIS2 IMPLEMENTATION:
 ======================================
 AS WE KNOW ECCLIPSE SUPPORTS AXIS1,AXS2,APACHECXF IMPLEMENTATIONS BUT HERE ONLY FOR AXIS1 ITS PROVIDING  JARS AND PLUGINS BUT FOR REMAINING IMPLEMENATIONS ITS ONLY PROVIDING
 PLUGINS BUT NOT JARS IF WE WANT TO WORK WITH AXIS2 OR APACHECXF  WE NEED TO DOWNLOAD JARS ....
 
 
 
 AXIS2 JARS WE NEED TO GET FROM NET.
 
 
 ** HERE WHEN EVER WE ARE WORKING WITH JAX-WS WE SHOULD WRITE THE ANNOTATIONS IN SERVICE CLASS BUT WHEN EVER WE ARE WORKING WITH ECCLIPSE O NEED TO WRITE ECCLIPSE INNTERNALLY ADDS THOSE ANNOTATIONS. 
 
 
 
 JAX-WS-APACHE CXF IMPLEMENATION:
 ================================
 
 WEB.XML===>SKELETON NAME WE NEED TO CONFIGURE
 
 WE NEED TO CREATE CONFIGURATION  FILE.WITH ANY NAME
 
 ECCLIPSE WILL GIVE  CXF-BEANS.XML(NAME CAN BE ANYTHING BUT WE NEED TO CONFIGURE IN WEB.XML)
 
 
 
 In apache cxf we CAN CREATE CLIENT IN TWO WAYS.

PROXY BASED CLIENT(BOTH)

1)WITH OUT CREATING CONFIGURATION FILE 
 
2)WITH  CREATING CONFIGURATION FILE 
 
 
 
 
 
 
 wsdl2java tool  is used to generate stubs in apachecxf.
 present in apachecxf bin folder.
 
 java2ws tool is used generate wsdl file
 
 apachecxf client:
 ==================
 main
 {
 JaxWsProxyFactoryBean factory=new JaxWsProxyFactoryBean();
 factory.setAddress("wsdl url");
 factory.setClass(interface);
CalServiceI ci=(CalServiceI)factory.create();
ci.add(10,20);
 }
 
 
 
 TRACING SOAP REQUEST AND RESPONSE:
 ----------------------------------
 
 
 Two Ways:
 ========
 IF WE WANT TRACE THE SOAP REDHATT AND RESPONSE IN WEBSERVICES CONFIGURATION FILE WE NEED TO WRITE EXTRA TAG I.E <JAXWS:FEATURE>
 <BEAN CLASS="">
 
 
 LoggingInInterceptor
 LoggingOutInterceptor
 
 
 
 WEBSERVICE SECURITY:
 ---------------------
 
 
 --->USERNAME TOKEN SECURITY.(SAMEL/USERNAME)AUTHENTICATION
 
 --->MESSAGE LEVEL SECURITY.(XP509/KEBROSE)
 
 
 
 
 RESTFUL WEBSERVICES(JAX-RS)ALONG WITH JDK1.6:
 =============================================
 1.JERSEY IMPLEMENTATION - SUN MICROSYSTEM-SEPARATELY DOWNLOAD

2.RESTEASY - REDHATT(SUPPORTS SPRING INTEGRATION)

3.RESTLET-JEROMY LOAVEL(DEVELOPER)

4.APACHE CXF - APACHE FOUNDATION

5.APACHE WINK - APACHE FOUNDATION-NOT SUPPORTS SPRING INTEGRATION
   
 **IN SOAP BASED WEBSERVICES THE COMMUNICATION WILL BE HAPPENED THROUGH XML(WITH SOAP SEPCIFICATION/PREDEFINED TAGS) ONLY IT DOESNT SUPPORTS ANY OTHER FORMAT
 
 
 **RESTFUL WEBSERVICES SUPPORTS MANY FORMATS LIKE XML,JSON,JAVASCRIPT OBJECT NOTATION,PLAIN TEXT,IMAGE(PDF),HTML..
 
 
 *** FOR EACH REQUEST AND RESPONSE IN CLIENT AND SERVICE IT NEEDS TO CHECKS WEATHER THE TAGS ARE XML(WITH SOAP SEPCIFICATION/PREDEFINED TAGS).IT TAKES SOME TIME TO CHECK THIS VALIDATION,PERFORMANCE LEVEL ALSO RESTFUL GOOD.
 
 IN RESTFUL ...EX:EMP ID NAME ADDRE...IN XML WHEN EVER CLIENT MAKES REQUEST AND  DIRECTLY IT WILL MOVE TO SERVICE SIDE AND CONVERT THAT COMPLETE XML TO JAVA OBJECT IT  WILL TAKE LESS TIME(LIGHT WEIGHT)
 
 
 
  ****SOAP BASED WEBSERVICES SUPPORT TWO TYPES SECURITIES LIKE USERNAME TOKEN SECURITY AND MESSAGE LEVEL SECURITY.
  
  ***BUT RESTFUL SUPPORTS ONLY USERNAME TOKEN SECURITY(IN RESTFUL BASIC AUTHENTICATION)BUT IT DOESNT SUPPORTS MESSAGE LEVEL SECURITY.
  
  
  
  
  
*USING JAX-P AND JAX-B  WE CAN JAVA OBJECT TO XML AND XML TO JAVA OBJECT.

 *USING JACKSON AND GSON(GOOGLESON) AND SIMPLE JSON  WE CAN CONVERT JAVA OBJECT TO JSON AND JSON TO JAVA OBJECT. 
 
 ObjectMapper mapper=new ObjectMapper();
 
 mapper.writevalue(newFile("student.json"),Student);
 
 
 
 mapper.readValue(newFile("student.json"),Student);
 
 
 
 
 JWT
 
 :JSON Web TOken :authorization
 
 
 eyJhbGciOiJIUzUxMiJ9.
 eyJzdWIiOiJjb2duaXphbnQiLCJleHAiOjE2OTI5MDY4ODgsImlhdCI6MTY5Mjg4ODg4OH0.
 GypzZ3Z3OwUAwXSbNJmwYtwjh6xyhT7zibfp7nbHp44qfzerUjqapkla6ovf3I7E30H60wHQLTbbSp_OQx7Wlg
 
 
 header.payload.signature
 
 
  common
  
  rest   				soap
XML,JSON,PT,HTML,JS		XML
 
 
 restapp			rest end point testing tool -->postman/swagger
 
 
 
 @RestController
 
 
 
 @RequestMapping("")
 
		@GetMapping
		@Postmapping
		@PutMapping
		@DeleteMapping
 
 
 
 
 
 